// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/http;

# Retrieves alert details for accounts
public isolated client class Client {
    final http:Client clientEp;
    final readonly & ApiKeysConfig? apiKeyConfig;
    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector` 
    # + serviceUrl - URL of the target service 
    # + return - An error if connector initialization failed 
    public isolated function init(ConnectionConfig config, string serviceUrl = "https://api.temenos.com/api/v1.1.0/holdings") returns error? {
        http:ClientConfiguration httpClientConfig = {httpVersion: config.httpVersion, http1Settings: config.http1Settings, http2Settings: config.http2Settings, timeout: config.timeout, forwarded: config.forwarded, followRedirects: config.followRedirects, poolConfig: config.poolConfig, cache: config.cache, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, cookieConfig: config.cookieConfig, responseLimits: config.responseLimits, secureSocket: config.secureSocket, proxy: config.proxy, socketConfig: config.socketConfig, validation: config.validation, laxDataBinding: config.laxDataBinding};
        if config.auth is ApiKeysConfig {
            self.apiKeyConfig = (<ApiKeysConfig>config.auth).cloneReadOnly();
        } else {
            httpClientConfig.auth = <http:CredentialsConfig>config.auth;
            self.apiKeyConfig = ();
        }
        self.clientEp = check new (serviceUrl, httpClientConfig);
    }

    # Retrieves the subscribed alerts details for an arrangement
    #
    # + arrangementId - Indicates an unique identifier of an account
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - SubscribedAlertsResponse 
    resource isolated function get arrangements/[string arrangementId]/alertRequests(GetSubscribedAlertsHeaders headers = {}, *GetSubscribedAlertsQueries queries) returns SubscribedAlertsResponse|error {
        string resourcePath = string `/arrangements/${getEncodedUri(arrangementId)}/alertRequests`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["apikey"] = self.apiKeyConfig?.apikey;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Retrieves the eligible alerts available for the account
    #
    # + accountId - Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN & BBAN
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - EligibleEventsResponse 
    resource isolated function get accounts/[string accountId]/alertEvents(GetEligibleEventsHeaders headers = {}, *GetEligibleEventsQueries queries) returns EligibleEventsResponse|error {
        string resourcePath = string `/accounts/${getEncodedUri(accountId)}/alertEvents`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["apikey"] = self.apiKeyConfig?.apikey;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Retrieves alert requests for external subscriptions.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + return - ExternalSubscribersAlertRequestsResponse 
    resource isolated function get arrangements/alertRequests/externalSubscriptions(GetExternalSubscribersAlertRequestsHeaders headers = {}, *GetExternalSubscribersAlertRequestsQueries queries) returns ExternalSubscribersAlertRequestsResponse|error {
        string resourcePath = string `/arrangements/alertRequests/externalSubscriptions`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["apikey"] = self.apiKeyConfig?.apikey;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        return self.clientEp->get(resourcePath, httpHeaders);
    }

    # Creates alert for external subscription.
    #
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + request - body Payload 
    # + return - AlertSubscriptionResponse 
    resource isolated function post arrangements/alertRequests(http:Request request, CreateAlertSubscriptionHeaders headers = {}, *CreateAlertSubscriptionQueries queries) returns AlertSubscriptionResponse|error {
        string resourcePath = string `/arrangements/alertRequests`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["apikey"] = self.apiKeyConfig?.apikey;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, httpHeaders);
    }

    # Updates the alert subscription details for online banking user
    #
    # + alertRequestId - The unique identifier of the alert request
    # + headers - Headers to be sent with the request 
    # + queries - Queries to be sent with the request 
    # + request - body Payload 
    # + return - AlertSubscriptionResponse 
    resource isolated function put arrangements/alertRequests/[string alertRequestId](http:Request request, UpdateAlertSubscriptionHeaders headers = {}, *UpdateAlertSubscriptionQueries queries) returns AlertSubscriptionResponse|error {
        string resourcePath = string `/arrangements/alertRequests/${getEncodedUri(alertRequestId)}`;
        map<anydata> headerValues = {...headers};
        if self.apiKeyConfig is ApiKeysConfig {
            headerValues["apikey"] = self.apiKeyConfig?.apikey;
        }
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        map<string|string[]> httpHeaders = http:getHeaderMap(headerValues);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, httpHeaders);
    }
}
